"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/ssg.ts
var ssg_exports = {};
__export(ssg_exports, {
  DataContext: () => DataContext,
  SSGContext: () => SSGContext,
  useData: () => useData,
  useSSG: () => useSSG,
  withData: () => withData,
  withSSG: () => withSSG
});
module.exports = __toCommonJS(ssg_exports);
var import_react = __toESM(require("react"));
var SSGContext = (0, import_react.createContext)(false);
var useSSG = (key = "ssg") => {
  var _a;
  return (_a = (0, import_react.useContext)(SSGContext)) == null ? void 0 : _a[key];
};
var withSSG = (Page) => {
  function WithSSG(props) {
    return import_react.default.createElement(SSGContext.Provider, { value: props }, import_react.default.createElement(Page, props));
  }
  WithSSG.getLayout = Page.getLayout;
  return WithSSG;
};
var DataContext = SSGContext;
var useData = useSSG;
var withData = withSSG;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DataContext,
  SSGContext,
  useData,
  useSSG,
  withData,
  withSSG
});
