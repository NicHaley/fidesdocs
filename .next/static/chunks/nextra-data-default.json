{"/fides/overview":{"title":"Overview","data":{"":"By default, key will be passed to fetcher as the argument. So the following 3 expressions are equivalent:\nuseSWR('/api/user', () => fetcher('/api/user'))\nuseSWR('/api/user', url => fetcher(url))\nuseSWR('/api/user', fetcher)","multiple-arguments#Multiple Arguments":"In some scenarios, it's useful to pass multiple arguments (can be any value or object) to the fetcher function.\nFor example an authorized fetch request:\nuseSWR('/api/user', url => fetchWithToken(url, token))\nThis is incorrect. Because the identifier (also the cache key) of the data is '/api/user',\neven if token changes, SWR will still use the same key and return the wrong data.Instead, you can use an array as the key parameter, which contains multiple arguments of fetcher:\nconst { data: user } = useSWR(['/api/user', token], fetchWithToken)\nThe function fetchWithToken still accepts the same 2 arguments, but the cache key will also be associated with token now.","passing-objects#Passing Objects":"Since SWR 1.1.0, object-like keys will be serialized under the hood automatically.\nSay you have another function that fetches data with a user scope: fetchWithUser(api, user). You can do the following:\nconst { data: user } = useSWR(['/api/user', token], fetchWithToken)\n\n// ...and then pass it as an argument to another useSWR hook\nconst { data: orders } = useSWR(user ? ['/api/orders', user] : null, fetchWithUser)\nYou can directly pass an object as the key, and fetcher will receive that object too:\nconst { data: orders } = useSWR({ url: '/api/orders', args: user }, fetcher)\n\nIn older versions (< 1.1.0), SWR shallowly compares the arguments on every render, and triggers revalidation if any of them has changed."}},"/enterprise/test":{"title":"Test","data":{"":"Upgrade to the latest version (≥ 1.0.0) to use this feature.\n\nIn most cases, you shouldn't directly write to the cache, which might cause undefined behaviors of SWR. If you need to manually mutate a key, please consider using the SWR APIs.\nSee also: Mutation, Reset Cache Between Test Cases.\nBy default, SWR uses a global cache to store and share data across all components. But you can also customize this behavior with the provider option of SWRConfig.Cache providers are intended to enable SWR with more customized storages.","cache-provider#Cache Provider":"A cache provider is Map-like object which matches the following TypeScript definition (which can be imported from swr):\ninterface Cache<Data> {\nget(key: string): Data | undefined\nset(key: string, value: Data): void\ndelete(key: string): void\n}"}},"/ethyca/overview":{"title":"Overview","data":{"":"By default, key will be passed to fetcher as the argument. So the following 3 expressions are equivalent:\nuseSWR('/api/user', () => fetcher('/api/user'))\nuseSWR('/api/user', url => fetcher(url))\nuseSWR('/api/user', fetcher)","multiple-arguments#Multiple Arguments":"In some scenarios, it's useful to pass multiple arguments (can be any value or object) to the fetcher function.\nFor example an authorized fetch request:\nuseSWR('/api/user', url => fetchWithToken(url, token))\nThis is incorrect. Because the identifier (also the cache key) of the data is '/api/user',\neven if token changes, SWR will still use the same key and return the wrong data.Instead, you can use an array as the key parameter, which contains multiple arguments of fetcher:\nconst { data: user } = useSWR(['/api/user', token], fetchWithToken)\nThe function fetchWithToken still accepts the same 2 arguments, but the cache key will also be associated with token now.","passing-objects#Passing Objects":"Since SWR 1.1.0, object-like keys will be serialized under the hood automatically.\nSay you have another function that fetches data with a user scope: fetchWithUser(api, user). You can do the following:\nconst { data: user } = useSWR(['/api/user', token], fetchWithToken)\n\n// ...and then pass it as an argument to another useSWR hook\nconst { data: orders } = useSWR(user ? ['/api/orders', user] : null, fetchWithUser)\nYou can directly pass an object as the key, and fetcher will receive that object too:\nconst { data: orders } = useSWR({ url: '/api/orders', args: user }, fetcher)\n\nIn older versions (< 1.1.0), SWR shallowly compares the arguments on every render, and triggers revalidation if any of them has changed."}},"/enterprise/heythere":{"title":"Yo yo yo","data":{"":"According to all known laws of aviation, there is no way a bee should be able to fly. Its wings are too small to get its fat little body off the ground. The bee, of course, flies anyway because bees don't care what humans think is impossible. Yellow, black. Yellow, black. Yellow, black. Yellow, black. Ooh, black and yellow! Let's shake it up a little. Barry! Breakfast is ready! Ooming! Hang on a second. Hello? - Barry? - Adam? - Oan you believe this is happening? - I can't. I'll pick you up. Looking sharp. Use the stairs. Your father paid good money for those. Sorry. I'm excited. Here's the graduate. We're very proud of you, son. A perfect report card, all B's. Very proud. Ma! I got a thing going here. - You got lint on your fuzz. - Ow! That's me! - Wave to us! We'll be in row 118,000. - Bye! Barry, I told you, stop flying in the house! - Hey, Adam. - Hey, Barry. - Is that fuzz gel? - A little. Special day, graduation. Never thought I'd make it. Three days grade school, three days high school. Those were awkward. Three days college. I'm glad I took a day and hitchhiked around the hive. You did come back different. - Hi, Barry. - Artie, growing a mustache? Looks good. - Hear about Frankie? - Yeah. - You going to the funeral? - No, I'm not going. Everybody knows, sting someone, you die. Don't waste it on a squirrel. Such a hothead. I guess he could have just gotten out of the way. I love this incorporating an amusement park into our day. That's why we don't need vacations. Boy, quite a bit of pomp... under the circumstances. - Well, Adam, today we are men. - We are! - Bee-men. - Amen! Hallelujah! Students, faculty, distinguished bees, please welcome Dean Buzzwell. Welcome, New Hive Oity graduating class of... ...9:15. That concludes our ceremonies. And begins your career at Honex Industries! Will we pick ourjob today? I heard it's just orientation. Heads up! Here we go."}},"/fides/fides2":{"title":"Fides 2","data":{"":"","conditional#Conditional":"Use null or pass a function as key to conditionally fetch data. If the function throws or returns a falsy value, SWR will not start the request.\n// conditionally fetch\nconst { data } = useSWR(shouldFetch ? '/api/data' : null, fetcher)\n\n// ...or return a falsy value\nconst { data } = useSWR(() => shouldFetch ? '/api/data' : null, fetcher)\n\n// ...or throw an error when user.id is not defined\nconst { data } = useSWR(() => '/api/data?uid=' + user.id, fetcher)","dependent#Dependent":"SWR also allows you to fetch data that depends on other data. It ensures the maximum possible parallelism (avoiding waterfalls), as well as serial fetching when a piece of dynamic data is required for the next data fetch to happen.\nfunction MyProjects () {\nconst { data: user } = useSWR('/api/user')\nconst { data: projects } = useSWR(() => '/api/projects?uid=' + user.id)\n// When passing a function, SWR will use the return\n// value as `key`. If the function throws or returns\n// falsy, SWR will know that some dependencies are not\n// ready. In this case `user.id` throws when `user`\n// isn't loaded.\n\nif (!projects) return 'loading...'\nreturn 'You have ' + projects.length + ' projects'\n}"}},"/fides/More/test":{"title":"Test","data":{"":"Upgrade to the latest version (≥ 1.0.0) to use this feature.\n\nIn most cases, you shouldn't directly write to the cache, which might cause undefined behaviors of SWR. If you need to manually mutate a key, please consider using the SWR APIs.\nSee also: Mutation, Reset Cache Between Test Cases.\nBy default, SWR uses a global cache to store and share data across all components. But you can also customize this behavior with the provider option of SWRConfig.Cache providers are intended to enable SWR with more customized storages.","cache-provider#Cache Provider":"A cache provider is Map-like object which matches the following TypeScript definition (which can be imported from swr):\ninterface Cache<Data> {\nget(key: string): Data | undefined\nset(key: string, value: Data): void\ndelete(key: string): void\n}"}},"/ethyca/ethyca1":{"title":"Ethyca 1","data":{"":"","conditional#Conditional":"Use null or pass a function as key to conditionally fetch data. If the function throws or returns a falsy value, SWR will not start the request.\n// conditionally fetch\nconst { data } = useSWR(shouldFetch ? '/api/data' : null, fetcher)\n\n// ...or return a falsy value\nconst { data } = useSWR(() => shouldFetch ? '/api/data' : null, fetcher)\n\n// ...or throw an error when user.id is not defined\nconst { data } = useSWR(() => '/api/data?uid=' + user.id, fetcher)","dependent#Dependent":"SWR also allows you to fetch data that depends on other data. It ensures the maximum possible parallelism (avoiding waterfalls), as well as serial fetching when a piece of dynamic data is required for the next data fetch to happen.\nfunction MyProjects () {\nconst { data: user } = useSWR('/api/user')\nconst { data: projects } = useSWR(() => '/api/projects?uid=' + user.id)\n// When passing a function, SWR will use the return\n// value as `key`. If the function throws or returns\n// falsy, SWR will know that some dependencies are not\n// ready. In this case `user.id` throws when `user`\n// isn't loaded.\n\nif (!projects) return 'loading...'\nreturn 'You have ' + projects.length + ' projects'\n}"}},"/fides/More/heythere":{"title":"Yo yo yo","data":{"":"According to all known laws of aviation, there is no way a bee should be able to fly. Its wings are too small to get its fat little body off the ground. The bee, of course, flies anyway because bees don't care what humans think is impossible. Yellow, black. Yellow, black. Yellow, black. Yellow, black. Ooh, black and yellow! Let's shake it up a little. Barry! Breakfast is ready! Ooming! Hang on a second. Hello? - Barry? - Adam? - Oan you believe this is happening? - I can't. I'll pick you up. Looking sharp. Use the stairs. Your father paid good money for those. Sorry. I'm excited. Here's the graduate. We're very proud of you, son. A perfect report card, all B's. Very proud. Ma! I got a thing going here. - You got lint on your fuzz. - Ow! That's me! - Wave to us! We'll be in row 118,000. - Bye! Barry, I told you, stop flying in the house! - Hey, Adam. - Hey, Barry. - Is that fuzz gel? - A little. Special day, graduation. Never thought I'd make it. Three days grade school, three days high school. Those were awkward. Three days college. I'm glad I took a day and hitchhiked around the hive. You did come back different. - Hi, Barry. - Artie, growing a mustache? Looks good. - Hear about Frankie? - Yeah. - You going to the funeral? - No, I'm not going. Everybody knows, sting someone, you die. Don't waste it on a squirrel. Such a hothead. I guess he could have just gotten out of the way. I love this incorporating an amusement park into our day. That's why we don't need vacations. Boy, quite a bit of pomp... under the circumstances. - Well, Adam, today we are men. - We are! - Bee-men. - Amen! Hallelujah! Students, faculty, distinguished bees, please welcome Dean Buzzwell. Welcome, New Hive Oity graduating class of... ...9:15. That concludes our ceremonies. And begins your career at Honex Industries! Will we pick ourjob today? I heard it's just orientation. Heads up! Here we go."}},"/":{"title":"Overview","data":{"":""}}}